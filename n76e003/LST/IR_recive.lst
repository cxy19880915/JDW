C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE IR_RECIVE
OBJECT MODULE PLACED IN .\Output\IR_recive.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\IR_recive.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include;.\Include)
                    - DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\IR_recive.lst) TABS(2) OBJECT(.\Output\IR_recive.obj)

line level    source

   1          #include "IR_recive.h"
   2          #include "config.h"
   3          
   4          #include "N76E003.h"
   5          #include "Common.h"
   6          //#include "Delay.h"
   7          #include "SFR_Macro.h"
   8          #include "Function_define.h"
   9          
  10          /********ms***********/
  11          #define First_Boot_code       8
  12          #define Second_Boot_code      4
  13          #define Data_0_1_code         1
  14          #define Stop_code             40
  15          
  16          #define Data_count            0x04        
  17          
  18          #define ir_pin                P03
  19          #define Key_count             14
  20          
  21          //#define   ir_play           0x01
  22          //#define   ir_fwd            0x02
  23          //#define   ir_rev            0x03
  24          //#define   ir_hall           0x04
  25          //#define   ir_music          0x05
  26          //#define   ir_speech         0x06
  27          //#define   ir_mute           0x07
  28          //#define   ir_volA           0x20
  29          //#define   ir_volB           0x30
  30          //#define   ir_source         0x40
  31          //#define   ir_power          0xf0
  32          //#define   ir_play           0x10
  33          
  34          UINT8 dat[Data_count]={0},key_press=0,ir_status=0,ir_count=0,key_PRE=0;
  35          bit Recive_flag=0;
  36          
  37          extern  void __delay_1ms( UINT16 u16CNT );
  38          extern  void Timer1_Delay1ms(UINT32 u32CNT);
  39          extern  void  NPCA110P_SOURCE(void);
  40          extern  void  NPCA110P_MODE(void);
  41          extern  void  NPCA110P_VOL_A(void);
  42          extern  void  NPCA110P_VOL_B(void);
  43          extern  void  NPCA110P_MUTE(void);
  44          extern  void  GPIO_MUTE(void);
  45          extern  bit power_flag,led_flag,_50ms_ir;
  46          
  47          extern  void BT_Play_Pause(void); 
  48          extern  void BT_REV_TASK(void); 
  49          extern  void BT_FWD_TASK(void); 
  50          
  51          extern  UINT8 KEY_VALUE;
  52          extern  UINT8 mode_in;
  53          extern  UINT8   key_flag;
  54          
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 2   

  55          bit ir_long=0,ir_short=0;
  56          UINT8 ir_play_lg=0,ir_fwd_lg=0,ir_rev_lg=0,ir_source_lg=0,ir_hall_lg=0;
  57          UINT8 ir_music_lg=0,ir_speech_lg=0,ir_volA_lg=0,ir_volB_lg=0,ir_power_lg=0,ir_mute_lg=0;
  58          
  59          void dat_clr(void);
  60          
  61          void IR_init(void)
  62          {
  63   1          P03_Input_Mode;
  64   1          P03 = 1;
  65   1          Enable_BIT3_LowLevel_Trig;
  66   1          set_EPI;              // Enable pin interrupt
  67   1      }
  68          
  69          
  70          
  71          void PinInterrupt_ISR (void) interrupt 7
  72          {
  73   1        UINT8 i=0,j=0,n11=0;
  74   1        if(PIF & 0x08)
  75   1        {
  76   2          PIF =PIF & 0xf7;                             //clear interrupt flag
  77   2          clr_EPI;
  78   2          i++;
  79   2          do//9ms low
  80   2          {
  81   3            n11++;
  82   3      //      Timer1_Delay1ms(1);
  83   3            __delay_1ms(1);
  84   3          }while(!ir_pin);
  85   2          if(n11<5)//没有达到8ms low
  86   2          {
  87   3            dat_clr();
  88   3            set_EPI;
  89   3            return;
  90   3          }
  91   2          n11=0;
  92   2          
  93   2          do//4ms high or 2ms high
  94   2          {
  95   3            n11++;
  96   3      //      Timer1_Delay1ms(1);
  97   3            __delay_1ms(1);
  98   3      //      if((!ir_pin)&&(n<Second_Boot_code))//2ms  high
  99   3      //        {
 100   3      //            dat_clr();
 101   3      //            set_EPI;
 102   3      //            return;
 103   3      //        }
 104   3          }while(ir_pin);
 105   2          n11=0;
 106   2          
 107   2          for(i=0;i<Data_count;i++)             //32bit数据码
 108   2          {
 109   3              for(j=0;j<8;j++)
 110   3              {
 111   4                  while(!ir_pin);                 //0.56ms  low
 112   4                
 113   4      //            Timer1_Delay1ms(Data_0_1_code);
 114   4                  __delay_1ms(1);
 115   4                  if(ir_pin)                        //数据 1  high
 116   4                  {
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 3   

 117   5                      dat[i] >>= 1;
 118   5                      dat[i] |= 0x80;
 119   5                      while(ir_pin);
 120   5                  }
 121   4                  else                          //数据 0  high
 122   4                  {
 123   5                      dat[i] >>= 1;
 124   5                  }
 125   4              }
 126   3              
 127   3          }
 128   2            
 129   2          while(!ir_pin);                         //0.56ms  low
 130   2      //    do//40ms  high
 131   2      //    {
 132   2      //      n11++;
 133   2      //      Timer1_Delay1ms(1);
 134   2      ////        if(n>30)//20ms  high
 135   2      ////        {
 136   2      ////          n=0;
 137   2      ////          Data_Check();
 138   2      ////          dat_clr();
 139   2      //////          Timer1_Delay1ms(100);
 140   2      ////          set_EPI;
 141   2      ////          return;
 142   2      ////        }
 143   2      //    }while(ir_pin);
 144   2          Data_Check();
 145   2          __delay_1ms(3);
 146   2      //    Timer1_Delay1ms(11);    
 147   2          dat_clr();
 148   2          set_EPI;
 149   2          return;
 150   2          #if 0
              //    while(ir_pin);  
                  set_GPIO1;
                  Data_Check();
                  Timer1_Delay1ms(2);                 //delay2ms
                  
                  for(i=0;i<First_Boot_code-2;i++)        
                  {
                      Timer1_Delay1ms(1);
                      if(ir_pin)
                      {
                          dat_clr();
                          set_EPI;
                          return;
                      }
                  }
                  while(!ir_pin);                         //8ms   low
              
              //    for(i=0;i<Second_Boot_code;i++)       
              //    {
              //        Timer1_Delay1ms(1);
              //        if(!ir_pin)
              //        {
              //            dat_clr();
              //            set_EX1;
              //            return;
              //        }
              //    }
                  while(ir_pin);                            //2ms   high
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 4   

                  
                  while(!ir_pin);                         //0.56ms  low
              //    Timer1_Delay1ms(2000);                  //delay2ms
              //    while(ir_pin);
                  
                  dat_clr();
                  set_EPI;
                  return;
                  #endif    
 188   2        }
 189   1        else
 190   1        {
 191   2          PIF = 0x00;                             //clear interrupt flag
 192   2        }
 193   1      }
 194          
 195          
 196          
 197          void Data_Check(void)
 198          {
 199   1          if(dat[2] == ~dat[3])
 200   1          {
 201   2              key_press = dat[2];
 202   2              dat_clr();
 203   2              Recive_flag = 1;
 204   2          }
 205   1          else
 206   1          {
 207   2              key_press = 0;
 208   2              Recive_flag = 0;
 209   2          }
 210   1      }
 211          
 212          void dat_clr(void)
 213          {
 214   1          UINT8 i;    
 215   1          for(i=0;i<Data_count;i++)
 216   1          {
 217   2              dat[i] = 0;
 218   2          }   
 219   1      }
 220          
 221          void IR_Deal(void)
 222          {
 223   1        UINT8 mod=0;
 224   1        if(_50ms_ir)
 225   1        {
 226   2          _50ms_ir = 0;
 227   2          if(ir_status & 0x80)
 228   2          {
 229   3            ir_count++;
 230   3            if(key_press == 0x00)//key up
 231   3            {
 232   4              ir_count = 0;
 233   4              if(MUTE)
 234   4              {
 235   5                MUTE = 0;
 236   5                if((key_PRE==0x14)||(key_PRE==0x15))
 237   5                  MUTE = 1;
 238   5              }
 239   4              switch(key_PRE)//switch(ir.dat.data0)
 240   4              {
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 5   

 241   5                case  0x10:       //PLAY
 242   5                    key_flag = 0x80;
 243   5                    KEY_VALUE = ir_play;      
 244   5                break;
 245   5                case  0x11:       //FWD
 246   5                    key_flag = 0x80;
 247   5                    KEY_VALUE = ir_fwd;
 248   5                  break;
 249   5                case  0x16:       //REV
 250   5                    key_flag = 0x80;
 251   5                    KEY_VALUE = ir_rev;
 252   5                  break;
 253   5                case  0x04:       //TREBLE-
 254   5                  break;
 255   5                case  0x0a:       //LINE IN
 256   5                  break;
 257   5                case  0x0b:       //AUX IN
 258   5                  break;
 259   5                case  0x0c:       //BLUETOOTH
 260   5                  break;
 261   5                case  0x41:       //SOURCE
 262   5                    key_flag = 0x80;
 263   5                    KEY_VALUE = ir_source;
 264   5                  break;
 265   5                case  0x4a:       //HALL
 266   5                    key_flag = 0x80;
 267   5                    KEY_VALUE = ir_hall;
 268   5                  break;
 269   5                case  0x4b:       //MUSIC
 270   5                    key_flag = 0x80;
 271   5                    KEY_VALUE = ir_music;
 272   5                  break;
 273   5                case  0x4c:       //SPEECH
 274   5                    key_flag = 0x80;
 275   5                    ir_speech_lg++;
 276   5                    KEY_VALUE = ir_speech;      
 277   5                  break;
 278   5                case  0x12:       //VOL+
 279   5                    key_flag = 0x80;
 280   5                    KEY_VALUE = ir_volA;  
 281   5                  break;      
 282   5                case  0x13:       //VOL-
 283   5                    key_flag = 0x80;
 284   5                    KEY_VALUE = ir_volB;
 285   5                  break;
 286   5                case  0x14:       //ON-OFF
 287   5                    key_flag = 0x80;
 288   5                    KEY_VALUE = ir_power;
 289   5                  break;
 290   5                case  0x15:       //MUTE
 291   5                    key_flag = 0x80;
 292   5                    KEY_VALUE = ir_mute;
 293   5                  break;
 294   5                case  0x18:       //HDMI
 295   5                  break;
 296   5                default:
 297   5                  break;
 298   5              }
 299   4              ir_status = ir_status & 0x00;
 300   4            }
 301   3          }
 302   2          if(Recive_flag)//key down
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 6   

 303   2          {
 304   3            Recive_flag = 0;  
 305   3            key_PRE = key_press;
 306   3            if((key_PRE!=0x14)&&ST_BY)
 307   3            {     
 308   4              ir_status =ir_status | 0x80;
 309   4            }
 310   3            else if(key_PRE==0x14)
 311   3            {
 312   4              ir_status =ir_status | 0x80;
 313   4            }
 314   3      //      ir_status =ir_status | 0x80;
 315   3            if(ir_count>2)
 316   3            switch(key_press)//switch(ir.dat.data0)
 317   3            {
 318   4      //        case  0x10:       //PLAY
 319   4      //            key_flag = 0x80;
 320   4      //            KEY_VALUE = ir_play;      
 321   4      //        break;
 322   4      //        case  0x11:       //FWD
 323   4      //            key_flag = 0x80;
 324   4      //            KEY_VALUE = ir_fwd;
 325   4      //          break;
 326   4      //        case  0x16:       //REV
 327   4      //            key_flag = 0x80;
 328   4      //            KEY_VALUE = ir_rev;
 329   4      //          break;
 330   4      //        case  0x04:       //TREBLE-
 331   4      //          break;
 332   4      //        case  0x0a:       //LINE IN
 333   4      //          break;
 334   4      //        case  0x0b:       //AUX IN
 335   4      //          break;
 336   4      //        case  0x0c:       //BLUETOOTH
 337   4      //          break;
 338   4      //        case  0x41:       //SOURCE
 339   4      //            key_flag = 0x80;
 340   4      //            KEY_VALUE = ir_source;
 341   4      //          break;
 342   4      //        case  0x4a:       //HALL
 343   4      //            key_flag = 0x80;
 344   4      //            KEY_VALUE = ir_hall;
 345   4      //          break;
 346   4      //        case  0x4b:       //MUSIC
 347   4      //            key_flag = 0x80;
 348   4      //            KEY_VALUE = ir_music;
 349   4      //          break;
 350   4      //        case  0x4c:       //SPEECH
 351   4      //            key_flag = 0x80;
 352   4      //            ir_speech_lg++;
 353   4      //            KEY_VALUE = ir_speech;      
 354   4      //          break;
 355   4              case  0x12:       //VOL+
 356   4                  key_flag = 0x80;
 357   4                  KEY_VALUE = ir_volA;  
 358   4                break;      
 359   4              case  0x13:       //VOL-
 360   4                  key_flag = 0x80;
 361   4                  KEY_VALUE = ir_volB;
 362   4                break;
 363   4      //        case  0x14:       //ON-OFF
 364   4      //            key_flag = 0x80;
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 7   

 365   4      //            KEY_VALUE = ir_power;
 366   4      //          break;
 367   4      //        case  0x15:       //MUTE
 368   4      //            key_flag = 0x80;
 369   4      //            KEY_VALUE = ir_mute;
 370   4      //          break;
 371   4      //        case  0x18:       //HDMI
 372   4      //          break;
 373   4              default:
 374   4                break;
 375   4            }
 376   3            key_press = 0;
 377   3      
 378   3      //    }
 379   3          #if 0
                  if(ir_status & 0x02)//long
                  {
                    switch(key_press)//switch(ir.dat.data0)
                    {
                      case  0x10:       //PLAY
                          key_flag = 0x80;
                          KEY_VALUE = ir_play;      
                      break;
                      case  0x11:       //FWD
                          key_flag = 0x80;
                          KEY_VALUE = ir_fwd;
                        break;
                      case  0x16:       //REV
                          key_flag = 0x80;
                          KEY_VALUE = ir_rev;
                        break;
                      case  0x04:       //TREBLE-
                        break;
                      case  0x0a:       //LINE IN
                        break;
                      case  0x0b:       //AUX IN
                        break;
                      case  0x0c:       //BLUETOOTH
                        break;
                      case  0x41:       //SOURCE
                          key_flag = 0x80;
                          KEY_VALUE = ir_source;
                        break;
                      case  0x4a:       //HALL
                          key_flag = 0x80;
                          KEY_VALUE = ir_hall;
                        break;
                      case  0x4b:       //MUSIC
                          key_flag = 0x80;
                          KEY_VALUE = ir_music;
                        break;
                      case  0x4c:       //SPEECH
                          key_flag = 0x80;
                          ir_speech_lg++;
                          KEY_VALUE = ir_speech;      
                        break;
                      case  0x12:       //VOL+
                          key_flag = 0x80;
                          KEY_VALUE = ir_volA;  
                        break;      
                      case  0x13:       //VOL-
                          key_flag = 0x80;
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/08/2018 14:36:32 PAGE 8   

                          KEY_VALUE = ir_volB;
                        break;
                      case  0x14:       //ON-OFF
                          key_flag = 0x80;
                          KEY_VALUE = ir_power;
                        break;
                      case  0x15:       //MUTE
                          key_flag = 0x80;
                          KEY_VALUE = ir_mute;
                        break;
                      case  0x18:       //HDMI
                        break;
                      default:
                        break;
                    }     
                  }
                  #endif
 444   3          }
 445   2      //  ir_count = 0;
 446   2        }
 447   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    517    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
