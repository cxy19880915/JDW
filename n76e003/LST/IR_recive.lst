C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/04/2018 23:03:20 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE IR_RECIVE
OBJECT MODULE PLACED IN .\Output\IR_recive.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\IR_recive.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include;.\Include)
                    - DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\IR_recive.lst) TABS(2) OBJECT(.\Output\IR_recive.obj)

line level    source

   1          #include "IR_recive.h"
   2          #include "config.h"
   3          
   4          #include "N76E003.h"
   5          #include "Common.h"
   6          //#include "Delay.h"
   7          #include "SFR_Macro.h"
   8          #include "Function_define.h"
   9          
  10          /********ms***********/
  11          #define First_Boot_code       8
  12          #define Second_Boot_code      4
  13          #define Data_0_1_code         1
  14          #define Stop_code             40
  15          
  16          #define Data_count            0x04        
  17          
  18          #define ir_pin                P03
  19          #define Key_count             14
  20          
  21          //#define   ir_play           0x01
  22          //#define   ir_fwd            0x02
  23          //#define   ir_rev            0x03
  24          //#define   ir_hall           0x04
  25          //#define   ir_music          0x05
  26          //#define   ir_speech         0x06
  27          //#define   ir_mute           0x07
  28          //#define   ir_volA           0x20
  29          //#define   ir_volB           0x30
  30          //#define   ir_source         0x40
  31          //#define   ir_power          0xf0
  32          //#define   ir_play           0x10
  33          
  34          UINT8 dat[Data_count]={0},key_press=0,ir_status=0,ir_count=0,key_PRE=0;
  35          bit Recive_flag=0;
  36          
  37          extern  void Timer1_Delay1ms(UINT32 u32CNT);
  38          extern  void  NPCA110P_SOURCE(void);
  39          extern  void  NPCA110P_MODE(void);
  40          extern  void  NPCA110P_VOL_A(void);
  41          extern  void  NPCA110P_VOL_B(void);
  42          extern  void  NPCA110P_MUTE(void);
  43          extern  void  GPIO_MUTE(void);
  44          extern  bit power_flag,led_flag;
  45          
  46          extern  void BT_Play_Pause(void); 
  47          extern  void BT_REV_TASK(void); 
  48          extern  void BT_FWD_TASK(void); 
  49          
  50          extern  UINT8 KEY_VALUE;
  51          extern  UINT8 mode_in;
  52          extern  UINT8   key_flag;
  53          
  54          bit ir_long=0,ir_short=0;
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/04/2018 23:03:20 PAGE 2   

  55          UINT8 ir_play_lg=0,ir_fwd_lg=0,ir_rev_lg=0,ir_source_lg=0,ir_hall_lg=0;
  56          UINT8 ir_music_lg=0,ir_speech_lg=0,ir_volA_lg=0,ir_volB_lg=0,ir_power_lg=0,ir_mute_lg=0;
  57          
  58          void dat_clr(void);
  59          
  60          void IR_init(void)
  61          {
  62   1          P03_Input_Mode;
  63   1          P03 = 1;
  64   1          Enable_BIT3_LowLevel_Trig;
  65   1          set_EPI;              // Enable pin interrupt
  66   1      }
  67          
  68          
  69          
  70          void PinInterrupt_ISR (void) interrupt 7
  71          {
  72   1        UINT8 i=0,j=0,n11=0;
  73   1        if(PIF & 0x08)
  74   1        {
  75   2          PIF =PIF & 0xf7;                             //clear interrupt flag
  76   2          clr_EPI;
  77   2          i++;
  78   2          do//9ms low
  79   2          {
  80   3            n11++;
  81   3            Timer1_Delay1ms(1);
  82   3          }while(!ir_pin);
  83   2      //    if(n<First_Boot_code)//没有达到8ms low
  84   2      //    {
  85   2      ////      dat_clr();
  86   2      //      set_EPI;
  87   2      //      return;
  88   2      //    }
  89   2          n11=0;
  90   2          
  91   2          do//4ms high or 2ms high
  92   2          {
  93   3            n11++;
  94   3            Timer1_Delay1ms(1);
  95   3      //      if((!ir_pin)&&(n<Second_Boot_code))//2ms  high
  96   3      //        {
  97   3      //            dat_clr();
  98   3      //            set_EPI;
  99   3      //            return;
 100   3      //        }
 101   3          }while(ir_pin);
 102   2          n11=0;
 103   2          
 104   2          for(i=0;i<Data_count;i++)             //32bit数据码
 105   2          {
 106   3              for(j=0;j<8;j++)
 107   3              {
 108   4                  while(!ir_pin);                 //0.56ms  low
 109   4                
 110   4                  Timer1_Delay1ms(Data_0_1_code);
 111   4                  if(ir_pin)                        //数据 1  high
 112   4                  {
 113   5                      dat[i] >>= 1;
 114   5                      dat[i] |= 0x80;
 115   5                      while(ir_pin);
 116   5                  }
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/04/2018 23:03:20 PAGE 3   

 117   4                  else                          //数据 0  high
 118   4                  {
 119   5                      dat[i] >>= 1;
 120   5                  }
 121   4              }
 122   3              
 123   3          }
 124   2            
 125   2          while(!ir_pin);                         //0.56ms  low
 126   2      //    do//40ms  high
 127   2      //    {
 128   2      //      n11++;
 129   2      //      Timer1_Delay1ms(1);
 130   2      ////        if(n>30)//20ms  high
 131   2      ////        {
 132   2      ////          n=0;
 133   2      ////          Data_Check();
 134   2      ////          dat_clr();
 135   2      //////          Timer1_Delay1ms(100);
 136   2      ////          set_EPI;
 137   2      ////          return;
 138   2      ////        }
 139   2      //    }while(ir_pin);
 140   2          Data_Check();
 141   2          Timer1_Delay1ms(30);    
 142   2          dat_clr();
 143   2          set_EPI;
 144   2          return;
 145   2          #if 0
              //    while(ir_pin);  
                  set_GPIO1;
                  Data_Check();
                  Timer1_Delay1ms(2);                 //delay2ms
                  
                  for(i=0;i<First_Boot_code-2;i++)        
                  {
                      Timer1_Delay1ms(1);
                      if(ir_pin)
                      {
                          dat_clr();
                          set_EPI;
                          return;
                      }
                  }
                  while(!ir_pin);                         //8ms   low
              
              //    for(i=0;i<Second_Boot_code;i++)       
              //    {
              //        Timer1_Delay1ms(1);
              //        if(!ir_pin)
              //        {
              //            dat_clr();
              //            set_EX1;
              //            return;
              //        }
              //    }
                  while(ir_pin);                            //2ms   high
                  
                  while(!ir_pin);                         //0.56ms  low
              //    Timer1_Delay1ms(2000);                  //delay2ms
              //    while(ir_pin);
                  
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/04/2018 23:03:20 PAGE 4   

                  dat_clr();
                  set_EPI;
                  return;
                  #endif    
 183   2        }
 184   1        else
 185   1        {
 186   2          PIF = 0x00;                             //clear interrupt flag
 187   2        }
 188   1      }
 189          
 190          
 191          
 192          void Data_Check(void)
 193          {
 194   1          if(dat[2] == ~dat[3])
 195   1          {
 196   2              key_press = dat[2];
 197   2              dat_clr();
 198   2              Recive_flag = 1;
 199   2          }
 200   1          else
 201   1          {
 202   2              key_press = 0;
 203   2              Recive_flag = 0;
 204   2          }
 205   1      }
 206          
 207          void dat_clr(void)
 208          {
 209   1          UINT8 i;    
 210   1          for(i=0;i<Data_count;i++)
 211   1          {
 212   2              dat[i] = 0;
 213   2          }   
 214   1      }
 215          
 216          void IR_Deal(void)
 217          {
 218   1        UINT8 mod=0;
 219   1        if(Recive_flag)
 220   1        {
 221   2          ir_status =ir_status | 0x80;
 222   2          if(key_press != key_PRE)
 223   2          {
 224   3            ir_count = 0;
 225   3      //      ir_status =ir_status & 0xfd;
 226   3          }
 227   2          ir_count++;
 228   2          if(ir_status & 0x01)//short
 229   2          {
 230   3            ir_status =ir_status & 0xfc;
 231   3            switch(key_press)//switch(ir.dat.data0)
 232   3            {
 233   4              case  0x10:       //PLAY
 234   4                  key_flag = 0x80;
 235   4                  KEY_VALUE = ir_play;      
 236   4              break;
 237   4              case  0x11:       //FWD
 238   4                  key_flag = 0x80;
 239   4                  KEY_VALUE = ir_fwd;
 240   4                break;
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/04/2018 23:03:20 PAGE 5   

 241   4              case  0x16:       //REV
 242   4                  key_flag = 0x80;
 243   4                  KEY_VALUE = ir_rev;
 244   4                break;
 245   4              case  0x04:       //TREBLE-
 246   4                break;
 247   4              case  0x0a:       //LINE IN
 248   4                break;
 249   4              case  0x0b:       //AUX IN
 250   4                break;
 251   4              case  0x0c:       //BLUETOOTH
 252   4                break;
 253   4              case  0x41:       //SOURCE
 254   4                  key_flag = 0x80;
 255   4                  KEY_VALUE = ir_source;
 256   4                break;
 257   4              case  0x4a:       //HALL
 258   4                  key_flag = 0x80;
 259   4                  KEY_VALUE = ir_hall;
 260   4                break;
 261   4              case  0x4b:       //MUSIC
 262   4                  key_flag = 0x80;
 263   4                  KEY_VALUE = ir_music;
 264   4                break;
 265   4              case  0x4c:       //SPEECH
 266   4                  key_flag = 0x80;
 267   4                  ir_speech_lg++;
 268   4                  KEY_VALUE = ir_speech;      
 269   4                break;
 270   4              case  0x12:       //VOL+
 271   4                  key_flag = 0x80;
 272   4                  KEY_VALUE = ir_volA;  
 273   4                break;      
 274   4              case  0x13:       //VOL-
 275   4                  key_flag = 0x80;
 276   4                  KEY_VALUE = ir_volB;
 277   4                break;
 278   4              case  0x14:       //ON-OFF
 279   4                  key_flag = 0x80;
 280   4                  KEY_VALUE = ir_power;
 281   4                break;
 282   4              case  0x15:       //MUTE
 283   4                  key_flag = 0x80;
 284   4                  KEY_VALUE = ir_mute;
 285   4                break;
 286   4              case  0x18:       //HDMI
 287   4                break;
 288   4              default:
 289   4                break;
 290   4            }
 291   3      
 292   3          }
 293   2          if(ir_status & 0x02)//long
 294   2          {
 295   3            switch(key_press)//switch(ir.dat.data0)
 296   3            {
 297   4              case  0x10:       //PLAY
 298   4                  key_flag = 0x80;
 299   4                  KEY_VALUE = ir_play;      
 300   4              break;
 301   4              case  0x11:       //FWD
 302   4                  key_flag = 0x80;
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/04/2018 23:03:20 PAGE 6   

 303   4                  KEY_VALUE = ir_fwd;
 304   4                break;
 305   4              case  0x16:       //REV
 306   4                  key_flag = 0x80;
 307   4                  KEY_VALUE = ir_rev;
 308   4                break;
 309   4              case  0x04:       //TREBLE-
 310   4                break;
 311   4              case  0x0a:       //LINE IN
 312   4                break;
 313   4              case  0x0b:       //AUX IN
 314   4                break;
 315   4              case  0x0c:       //BLUETOOTH
 316   4                break;
 317   4              case  0x41:       //SOURCE
 318   4                  key_flag = 0x80;
 319   4                  KEY_VALUE = ir_source;
 320   4                break;
 321   4              case  0x4a:       //HALL
 322   4                  key_flag = 0x80;
 323   4                  KEY_VALUE = ir_hall;
 324   4                break;
 325   4              case  0x4b:       //MUSIC
 326   4                  key_flag = 0x80;
 327   4                  KEY_VALUE = ir_music;
 328   4                break;
 329   4              case  0x4c:       //SPEECH
 330   4                  key_flag = 0x80;
 331   4                  ir_speech_lg++;
 332   4                  KEY_VALUE = ir_speech;      
 333   4                break;
 334   4              case  0x12:       //VOL+
 335   4                  key_flag = 0x80;
 336   4                  KEY_VALUE = ir_volA;  
 337   4                break;      
 338   4              case  0x13:       //VOL-
 339   4                  key_flag = 0x80;
 340   4                  KEY_VALUE = ir_volB;
 341   4                break;
 342   4              case  0x14:       //ON-OFF
 343   4                  key_flag = 0x80;
 344   4                  KEY_VALUE = ir_power;
 345   4                break;
 346   4              case  0x15:       //MUTE
 347   4                  key_flag = 0x80;
 348   4                  KEY_VALUE = ir_mute;
 349   4                break;
 350   4              case  0x18:       //HDMI
 351   4                break;
 352   4              default:
 353   4                break;
 354   4            }     
 355   3          }
 356   2          Recive_flag = 0;
 357   2          key_PRE = key_press;
 358   2        }
 359   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    590    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         01/04/2018 23:03:20 PAGE 7   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
