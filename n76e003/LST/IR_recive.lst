C51 COMPILER V9.56.0.0   IR_RECIVE                                                         12/28/2017 11:00:28 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE IR_RECIVE
OBJECT MODULE PLACED IN .\Output\IR_recive.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\IR_recive.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include;.\Include)
                    - DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\IR_recive.lst) TABS(2) OBJECT(.\Output\IR_recive.obj)

line level    source

   1          #include "IR_recive.h"
   2          
   3          
   4          #include "N76E003.h"
   5          #include "Common.h"
   6          #include "Delay.h"
   7          #include "SFR_Macro.h"
   8          #include "Function_define.h"
   9          
  10          /********ms***********/
  11          #define First_Boot_code       8
  12          #define Second_Boot_code      4
  13          #define Data_0_1_code         1
  14          #define Stop_code             40
  15          
  16          #define Data_count            0x04        
  17          
  18          #define ir_pin                P03
  19          #define Key_count             14
  20          
  21          UINT8 dat[Data_count]={0},key_press=0;
  22          bit Recive_flag=0;
  23          
  24          extern  void  NPCA110P_SOURCE(void);
  25          extern  void  NPCA110P_VOL_A(void);
  26          extern  void  NPCA110P_VOL_B(void);
  27          extern  void  NPCA110P_MUTE(void);
  28          extern  void  GPIO_MUTE(void);
  29          extern  bit power_flag,led_flag;
  30          
  31          void IR_init(void)
  32          {
  33   1          P03_Input_Mode;
  34   1          P03 = 1;
  35   1          Enable_BIT3_LowLevel_Trig;
  36   1          set_EPI;              // Enable pin interrupt
  37   1      }
  38          
  39          
  40          
  41          void PinInterrupt_ISR (void) interrupt 7
  42          {
  43   1        UINT8 i=0,j=0,n=0;
  44   1        if(PIF & 0x08)
  45   1        {
  46   2          PIF =PIF & 0xf7;                             //clear interrupt flag
  47   2        #if 1
  48   2          clr_EPI;
  49   2      //    for(i=0;i<200;i++)
  50   2      //    {
  51   2      //      while(!ir_pin);
  52   2      //      while(ir_pin);
  53   2      //    }
  54   2      //    clr_GPIO1;                                //亮指示灯
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         12/28/2017 11:00:28 PAGE 2   

  55   2      //    for(i=0;i<First_Boot_code;i++)            //8ms low
  56   2      //    {
  57   2      //        Timer1_Delay1ms(1);
  58   2      //        if(ir_pin)
  59   2      //        {
  60   2      //            dat_clr();
  61   2      //            set_EPI;
  62   2      //            return;
  63   2      //        }
  64   2      //    }
  65   2          do
  66   2          {
  67   3      //      Timer1_Delay1ms(1);
  68   3            Timer0_Delay100us(1);
  69   3            n++;
  70   3            if((ir_pin)&&(n<First_Boot_code-1))
  71   3            {
  72   4              dat_clr();
  73   4              set_EPI;
  74   4              return;
  75   4            }
  76   3          }
  77   2          while(!ir_pin);
  78   2      //    n = 0;
  79   2      //    do
  80   2      //    {
  81   2      //      Timer1_Delay1ms(1);
  82   2      //      n++;
  83   2      //      if((ir_pin)&&(n<Second_Boot_code-1))    //4ms high or 2ms high
  84   2      //        {
  85   2      //            dat_clr();
  86   2      //            set_EPI;
  87   2      //            return;
  88   2      //        }
  89   2      //    }
  90   2          while(ir_pin);
  91   2          
  92   2      //    for(i=0;i<Second_Boot_code;i++)           //4ms high or 2ms high
  93   2      //    {
  94   2      //        Timer1_Delay1ms(1);
  95   2      //        if(!ir_pin)
  96   2      //        {
  97   2      //            dat_clr();
  98   2      //            set_EPI;
  99   2      //            return;
 100   2      //        }
 101   2      //    }
 102   2      //    while(ir_pin);
 103   2        
 104   2          for(i=0;i<Data_count;i++)             //32bit数据码
 105   2          {
 106   3              for(j=0;j<8;j++)
 107   3              {
 108   4                  while(!ir_pin);                 //0.56ms  low
 109   4                
 110   4      //            Timer1_Delay1ms(Data_0_1_code);
 111   4                  if(ir_pin)                        //数据 1  high
 112   4                  {
 113   5                      dat[i] >>= 1;
 114   5                      dat[i] |= 0x80;
 115   5                      while(ir_pin);
 116   5                  }
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         12/28/2017 11:00:28 PAGE 3   

 117   4                  else                          //数据 0  high
 118   4                  {
 119   5                      dat[i] >>= 1;
 120   5                  }
 121   4              }
 122   3              
 123   3          }
 124   2            
 125   2          while(!ir_pin);                         //0.56ms  low
 126   2          dat_clr();
 127   2          set_EPI;
 128   2          return;
 129   2        #endif
 130   2        #if 0   
                  for(i=0;i<Stop_code;i++)          //40ms    high
                  {
                      Timer1_Delay1ms(1);
                      if(i>20)
                      {
                        dat_clr();
                        set_EPI;
                        return;
                      }
                      if(!ir_pin)
                      {
                        dat_clr();
                        set_EPI;
                        return;
                      }
                  }
              
              //    while(ir_pin);  
                  set_GPIO1;
                  Data_Check();
                  Timer1_Delay1ms(2);                 //delay2ms
                  
                  for(i=0;i<First_Boot_code-2;i++)        
                  {
                      Timer1_Delay1ms(1);
                      if(ir_pin)
                      {
                          dat_clr();
                          set_EPI;
                          return;
                      }
                  }
                  while(!ir_pin);                         //8ms   low
              
              //    for(i=0;i<Second_Boot_code;i++)       
              //    {
              //        Timer1_Delay1ms(1);
              //        if(!ir_pin)
              //        {
              //            dat_clr();
              //            set_EX1;
              //            return;
              //        }
              //    }
                  while(ir_pin);                            //2ms   high
                  
                  while(!ir_pin);                         //0.56ms  low
              //    Timer1_Delay1ms(2000);                  //delay2ms
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         12/28/2017 11:00:28 PAGE 4   

              //    while(ir_pin);
                  
                  dat_clr();
                  set_EPI;
                  return;
                  #endif    
 185   2        }
 186   1        else
 187   1        {
 188   2          PIF = 0x00;                             //clear interrupt flag
 189   2        }
 190   1      }
 191          
 192          
 193          
 194          void Data_Check(void)
 195          {
 196   1          if(dat[2] == ~dat[3])
 197   1          {
 198   2              key_press = dat[2];
 199   2              dat_clr();
 200   2              Recive_flag = 1;
 201   2          }
 202   1          else
 203   1          {
 204   2              key_press = 0;
 205   2              Recive_flag = 0;
 206   2          }
 207   1      }
 208          
 209          void dat_clr(void)
 210          {
 211   1          UINT8 i;    
 212   1          for(i=0;i<Data_count;i++)
 213   1          {
 214   2              dat[i] = 0;
 215   2          }   
 216   1      }
 217          
 218          void IR_Deal(void)
 219          {
 220   1        if(Recive_flag)
 221   1        {
 222   2          switch(key_press)//switch(ir.dat.data0)
 223   2          {
 224   3            case  0x01:       //BASS+
 225   3              break;
 226   3            case  0x02:       //BASS-
 227   3              break;
 228   3            case  0x03:       //TREBLE+
 229   3              break;
 230   3            case  0x04:       //TREBLE-
 231   3              break;
 232   3            case  0x0a:       //LINE IN
 233   3              break;
 234   3            case  0x0b:       //AUX IN
 235   3              break;
 236   3            case  0x0c:       //BLUETOOTH
 237   3              break;
 238   3            case  0x0d:       //OPTICAL
 239   3            if(ST_BY)
 240   3            {
C51 COMPILER V9.56.0.0   IR_RECIVE                                                         12/28/2017 11:00:28 PAGE 5   

 241   4              NPCA110P_SOURCE();
 242   4              led_flag = 1;
 243   4            }
 244   3              break;
 245   3            case  0x0e:       //COAXIAL
 246   3              break;
 247   3            case  0x12:       //VOL+
 248   3            if(ST_BY)
 249   3            {
 250   4              NPCA110P_VOL_A();
 251   4            }
 252   3              break;
 253   3            case  0x13:       //VOL-
 254   3            if(ST_BY)
 255   3            {
 256   4              NPCA110P_VOL_B();
 257   4            }
 258   3              break;
 259   3            case  0x14:       //ON-OFF
 260   3            {
 261   4              power_flag = ~power_flag;
 262   4              break;
 263   4            }
 264   3            case  0x15:       //MUTE
 265   3            if(ST_BY)
 266   3            {
 267   4      //        NPCA110P_MUTE();
 268   4              GPIO_MUTE();
 269   4            }
 270   3              break;
 271   3            case  0x18:       //HDMI
 272   3              break;
 273   3            default:
 274   3              break;
 275   3          }
 276   2          Recive_flag = 0;
 277   2        }
 278   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    304    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
