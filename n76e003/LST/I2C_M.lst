C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE I2C_M
OBJECT MODULE PLACED IN .\Output\I2C_M.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\I2C_M.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include;.\Include) DEF
                    -INE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\I2C_M.lst) TABS(2) OBJECT(.\Output\I2C_M.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/29/2017
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E003 I2C master mode demo code, the Slave address = 0xA4
  16          //
  17          //   ____________            _____________ 
  18          //  |            |   SDA    |             |
  19          //  |            |<-------->|             |
  20          //  |            |          |             |
  21          //  |N76E003(M) |          | N76E003(S) |
  22          //  |(I2C_Master)|          | (I2C_Slave) |
  23          //  |            |   SCL    |             |
  24          //  |            |--------->|             |
  25          //  |____________|          |_____________|
  26          //
  27          //  The protocol of I2C is same the "24LC64"
  28          //********************************************************************************************************
             -***
  29          
  30          #include "I2C_M.h"
  31          
  32          
  33          #define I2C_CLOCK               13
  34          //#define EEPROM_SLA              0xA4
  35          #define EEPROM_WR               0
  36          #define EEPROM_RD               1
  37          #define ERROR_CODE              0x78
  38          #define PAGE_SIZE               32
  39          #define SDA_I2C                 SDA
  40          #define SCL_I2C                 SCL
  41          #if 1
  42          
  43          //========================================================================================================
  44          void  delay(void)
  45          {
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 2   

  46   1          UINT16 i = 0;
  47   1          for(i=0;i<50;i++);
  48   1      //    Timer1_Delay10us(1);
  49   1      }
  50          //========================================================================================================
  51          void I2C_Error(void)
  52          {
  53   1      //    P3 = I2STAT;
  54   1      //    P3 = ERROR_CODE;
  55   1          while (1)P12 = 0;    
  56   1      }
  57          
  58          void Init_I2C(void)
  59          {
  60   1          SCL_I2C = 1;                                //set SDA and SCL pins high
  61   1          delay();
  62   1          SDA_I2C = 1;
  63   1          delay();
  64   1      }
  65          //========================================================================================================
  66          void start_I2C(void)
  67          {
  68   1          SDA_I2C = 1;
  69   1          delay();
  70   1          SCL_I2C = 1; 
  71   1          delay();
  72   1          SDA_I2C = 0;
  73   1          delay();
  74   1      }
  75          
  76          //========================================================================================================
  77          void respons_I2C(void)
  78          {
  79   1          UINT16 i = 0;
  80   1          SCL_I2C = 1;
  81   1          delay();
  82   1          while((SDA_I2C == 1)&&(i<50000))
  83   1          {
  84   2              i++;
  85   2              if(i==5000)
  86   2              {
  87   3                  I2C_Error();
  88   3              }
  89   2          }
  90   1          SCL_I2C = 0;
  91   1          delay();
  92   1      }
  93          
  94          //========================================================================================================
  95          void stop_I2C(void)
  96          {
  97   1          SDA_I2C = 0;
  98   1          delay();
  99   1          SCL_I2C = 1;
 100   1          delay();
 101   1          SDA_I2C = 1;
 102   1          delay();
 103   1      }
 104          
 105          void writebyte_I2C(UINT8 data_I2C)
 106          {
 107   1          UINT8 i,temp;
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 3   

 108   1          temp = data_I2C;
 109   1          for(i = 0;i < 8;i++)
 110   1          {
 111   2              SCL_I2C = 0;
 112   2              delay();
 113   2              if(temp&0x80)
 114   2              {
 115   3                  SDA_I2C = 1;
 116   3              }
 117   2              else
 118   2              {
 119   3                  SDA_I2C = 0;
 120   3              }
 121   2              temp = temp << 1;
 122   2              delay();
 123   2              SCL_I2C = 1;
 124   2              delay();
 125   2          }
 126   1          SCL_I2C = 0;
 127   1          delay();
 128   1          SDA_I2C = 1;
 129   1          delay();
 130   1      }
 131          
 132          UINT8 readbyte_I2C(bit SDA_I2C,bit SCL_I2C)
 133          {
 134   1          UINT8 i,k;
 135   1          SCL_I2C = 0;
 136   1          delay();
 137   1          SDA_I2C = 1;
 138   1          delay();
 139   1          for(i = 0;i < 8;i++)
 140   1          {
 141   2              SCL_I2C = 1;
 142   2              delay();
 143   2              k = (k << 1)| SDA_I2C;
 144   2              SCL_I2C = 0;
 145   2              delay();
 146   2          }
 147   1          delay();
 148   1          return k;
 149   1      }
 150          
 151          void I2C_Write_Command(UINT8 u8Address, UINT8* p8Data, UINT32 u32ByteSize)
 152          {
 153   1          UINT8 i=0;
 154   1          start_I2C();
 155   1          writebyte_I2C(u8Address|EEPROM_WR);
 156   1          respons_I2C();
 157   1          for(i=0;i<u32ByteSize;i++)
 158   1          {
 159   2              writebyte_I2C(*p8Data++);
 160   2              respons_I2C();
 161   2          }
 162   1          stop_I2C(); 
 163   1      }
 164          #endif
 165          #if 0
              //========================================================================================================
              void Init_I2C(void)
              {
                  P13_OpenDrain_Mode;         // Modify SCL pin to Open drain mode. don't forget the pull high resister in cir
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 4   

             -cuit
                  P14_OpenDrain_Mode;         // Modify SDA pin to Open drain mode. don't forget the pull high resister in cir
             -cuit
              //    SDA = 1;
              //    SCL = 1;
                  /* Set I2C clock rate */
                  I2CLK = I2C_CLOCK; 
              
                  /* Enable I2C */
                  set_I2CEN;                                   
              }
              //========================================================================================================
              void I2C_Error(void)
              {
                      set_STO;
                      clr_SI;
                      if(SI)
                      {
                          clr_I2CEN;
                          set_I2CEN;
                          clr_SI;
                          clr_I2CEN;    
                      } 
              //    P3 = I2STAT;
              //    P3 = ERROR_CODE;
              //    while (1);    
              }
              //========================================================================================================
              void I2C_Write_Command(UINT8 u8Address, UINT8* p8Data, UINT32 u32ByteSize)
              {
                UINT32 u32count = 0;
                  /* Step1 */
                  set_STA;                                /* Send Start bit to I2C EEPROM */         
                  clr_SI;
                  while (!SI);
                  if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
                      I2C_Error();
                  
                  /* Step2 */
                  clr_STA;                                    //STA=0
                  I2DAT = (u8Address | EEPROM_WR);
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x18)              
                      I2C_Error();
                  
                  /* Step3 */
                  while(u32count<u32ByteSize)
                  {
                      I2DAT = *(p8Data+u32count++);
                      clr_SI;
                      while (!SI);                            //Check SI set or not
                      if (I2STAT != 0x28)              
                          I2C_Error();    
                  }
                  
                  /* Step4 */
                  set_STO;                            /* Set I2C STOP Control Bit */
                  clr_SI;
                  while (STO);
              }
              //========================================================================================================
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 5   

              UINT8 I2C_Receive_Command(UINT8 u8Address, UINT8* p8Data, UINT32 u32ByteSize)
              {
                UINT8 xdata u8DAT[256];
                UINT32 u32count = 0;
                  /* Step1 */
                  set_STA;                                /* Send Start bit to I2C EEPROM */         
                  clr_SI;
                  while (!SI);
                  if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
                      I2C_Error();
                  
                  /* Step2 */
                  clr_STA;                                    //STA=0
                  I2DAT = (u8Address | EEPROM_WR);
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x18)              
                      I2C_Error();
                  
                  /* Step3 */
                  while(u32count<2)
                  {
                      I2DAT = *(p8Data+u32count++);
                      clr_SI;
                      while (!SI);                            //Check SI set or not
                      if (I2STAT != 0x28)              
                          I2C_Error();    
                  }
                  
                  /* Step4 */
                  set_STA;                                /* Repeated START */
                  clr_SI; 
                  while (!SI);
                  if (I2STAT != 0x10)                     /* 0x10: A repeated START condition has been transmitted */
                      I2C_Error(); 
                  
                  /* Step5 */
                  clr_STA;                                    //STA=0
                  I2DAT = (u8Address | EEPROM_RD);
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x40)              
                      I2C_Error();
                  
                  for(u32count=0;u32count<u32ByteSize;u32count++)
                  {
                      set_AA;
                      clr_SI;        
                      while (!SI);                            //Check SI set or not
              
                      if (I2STAT != 0x50)              
                          I2C_Error();  
                      u8DAT[u32count] = I2DAT;
                  }
                  
                  /* Step6 */
                  clr_AA;
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x58)              
                      I2C_Error();
              
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 6   

                  /* Step7 */
                  set_STO;
                  clr_SI;
                  while (STO);                                /* Check STOP signal */ 
                  return  u8DAT;
              }
              #endif
 299          #if 0
              //========================================================================================================
              void I2C_Process(UINT8 u8DAT)
              {
                  UINT32 u32Count;
              
              //--------------------------------------------------------------------------------------------
              //----  Page Write----------------------------------------------------------------------------
              //--------------------------------------------------------------------------------------------
                  /* Step1 */
                  set_STA;                                    /* Send Start bit to I2C EEPROM */
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x08)                         //Check status value after every step
                      I2C_Error();
                  
                  /* Step2 */
                  clr_STA;                                    //STA=0
                  I2DAT = (EEPROM_SLA | EEPROM_WR);
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x18)              
                      I2C_Error();
              
                  /* Step3 */
                  I2DAT = 0x00;                               //address high for I2C EEPROM
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x28)              
                      I2C_Error();
                                  
                  /* Step4 */
                  I2DAT = 0x00;                               //address low for I2C EEPROM
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x28)              
                      I2C_Error();
              
                  /* Step5 */
                  for (u32Count = 0; u32Count < PAGE_SIZE; u32Count++)
                  {
                      I2DAT = u8DAT;
                      clr_SI;
                      while (!SI);                            //Check SI set or not
                      if (I2STAT != 0x28)              
                          I2C_Error();
              
                      u8DAT = ~u8DAT;        
                  }
              
              //--------------------------------------------------------------------------------------------
              //----  Waitting the ready for I2C write------------------------------------------------------
              //--------------------------------------------------------------------------------------------
                  /* Step6 */
                  do{
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 7   

                      set_STO;
                      clr_SI;
                      
                      set_STA;                                //Check if no ACK is returned by EEPROM, it is under timed
             --write cycle
                      clr_SI;
                      while (!SI);                            //Check SI set or not
                      if (I2STAT != 0x08)                     //Check status value after every step
                          I2C_Error();
              
                      clr_STA;
                      I2DAT = (EEPROM_SLA | EEPROM_WR);
                      clr_SI;
                      while (!SI);                            //Check SI set or not
                  }while (I2STAT != 0x18);
                  
                  /* Step7 */
                  set_STO;
                  clr_SI;
                  while (STO);                                /* Check STOP signal */
              //--------------------------------------------------------------------------------------------
              //----  Page Read ----------------------------------------------------------------------------
              //--------------------------------------------------------------------------------------------
                  /* Step8 */
                  set_STA;
                  clr_SI;          
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x08)                         //Check status value after every step
                      I2C_Error();
              
                  /* Step9 */
                  I2DAT = (EEPROM_SLA | EEPROM_WR);
                  clr_STA;
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x18)              
                      I2C_Error();
              
                  /* Step10 */
                  I2DAT = 0x00;                               //address high for I2C EEPROM
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x28)              
                      I2C_Error();
              
                  /* Step11 */
                  I2DAT = 0x00;                               //address low for I2C EEPROM
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x28)              
                      I2C_Error();
              
                  /* Step12 */
                  /* Repeated START */
                  set_STA;                       
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x10)                         //Check status value after every step
                      I2C_Error();
                  
                  /* Step13 */
                  clr_STA;                                    //STA needs to be cleared after START codition is generate
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 8   

             -d
                  I2DAT = (EEPROM_SLA | EEPROM_RD);
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x40)              
                      I2C_Error();
                  
                  /* Step14 */
                  for (u32Count = 0; u32Count <PAGE_SIZE-1; u32Count++)
                  {
                      set_AA;
                      clr_SI;        
                      while (!SI);                            //Check SI set or not
              
                      if (I2STAT != 0x50)              
                          I2C_Error();
                      
                      if (I2DAT != u8DAT)             
                          I2C_Error();
                      u8DAT = ~u8DAT; 
                  } 
                  
                  /* Step15 */
                  clr_AA;
                  clr_SI;
                  while (!SI);                                //Check SI set or not
                  if (I2STAT != 0x58)              
                      I2C_Error();
              
                  /* Step16 */
                  set_STO;
                  clr_SI;
                  while (STO);                                /* Check STOP signal */ 
              }
              //========================================================================================================
              //void main(void)
              //{
              //    /* Note
              //       MCU power on system clock is HIRC (22.1184MHz), so Fsys = 22.1184MHz
              //    */
              //    
              //    Set_All_GPIO_Quasi_Mode;  
              //    Init_I2C();                                 //initial I2C circuit
              //    I2C_Process(0x55);                          /* I2C Master will send 0x55,0xAA,.... to slave */
              //    
              //    P0 = 0x00;
              //    P3 = 0x00;
              //    
              //    while (1);
              ///* =================== */
              //}
              #endif
 466          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    263    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.56.0.0   I2C_M                                                             12/28/2017 16:46:12 PAGE 9   

   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
