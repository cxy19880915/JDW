C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 10:43:48 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\Adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\Adc.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include;.\Include) DEFIN
                    -E(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Adc.lst) TABS(2) OBJECT(.\Output\Adc.obj)

line level    source

   1          #include "adc.h"
   2          
   3          /*************  本地变量声明  **************/
   4          UINT8 adc_count = 0,KEY_VALUE = 0;
   5          bit   key_flag = 0;
   6          UINT8 adc_RH = 0;
   7          //UINT8 adc_V = 0;
   8          //bit   adc_V_flag = 0;
   9          
  10          #define   POWER   0x00
  11          #define   MODE    0x10
  12          #define   VOL_A   0x20
  13          #define   VOL_B   0x30
  14          #define   SOURCE  0x40
  15          
  16          extern  bit power_flag,led_flag;
  17          extern  UINT8 source_in,mode_in,VOL_level;
  18          extern  void  NPCA110P_MODE(void);
  19          extern  void  NPCA110P_SOURCE(void);
  20          extern  void  NPCA110P_VOL_A(void);
  21          extern  void  NPCA110P_VOL_B(void);
  22          
  23          UINT8 adc_start(void)
  24          {
  25   1        UINT8 adc_dat = 0;
  26   1        clr_ADCF;
  27   1        set_ADCS;
  28   1        while(ADCF == 0);
  29   1        adc_dat = ADCRH;
  30   1        adc_count++;
  31   1        return  adc_dat;
  32   1      }
  33          
  34          void  KEY_EVENT(void)
  35          {
  36   1        if(key_flag)
  37   1        {
  38   2          switch(KEY_VALUE)
  39   2          {
  40   3            case  POWER:
  41   3              power_flag = ~power_flag;
  42   3            break;
  43   3            
  44   3            case  MODE:
  45   3              mode_in++;
  46   3            break;
  47   3            
  48   3            case  SOURCE:
  49   3              source_in++;
  50   3            break;
  51   3            
  52   3            case  VOL_A:
  53   3              VOL_level++;
  54   3            break;
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 10:43:48 PAGE 2   

  55   3            
  56   3            case  VOL_B:
  57   3              VOL_level--;
  58   3            break;
  59   3            default:
  60   3              break;
  61   3          }
  62   2      //    if(KEY_VALUE == POWER)
  63   2      //    {
  64   2      //      power_flag = ~power_flag;
  65   2      //    }
  66   2      //    if(KEY_VALUE == MODE)
  67   2      //    {
  68   2      //      NPCA110P_MODE();
  69   2      //      led_flag = 1;
  70   2      //    }
  71   2      //    if(adc_RH == VOL_A)
  72   2      //    {
  73   2      //      NPCA110P_VOL_A();
  74   2      //    }
  75   2      //    if(adc_RH == VOL_B)
  76   2      //    {
  77   2      //      NPCA110P_VOL_B();
  78   2      //    }
  79   2      //    if(adc_RH == SOURCE)
  80   2      //    {
  81   2      //      NPCA110P_SOURCE();
  82   2      //      led_flag = 1;
  83   2      //    }
  84   2          key_flag = 0;
  85   2        }
  86   1      }
  87          
  88          void  adc_init(void)
  89          {
  90   1      //  InitialUART0_Timer1(115200);
  91   1        P04_Quasi_Mode;
  92   1        Enable_ADC_AIN5;
  93   1      //  P04_FALLINGEDGE_TRIG_ADC;                     // P0.4 falling edge as adc start trig signal
  94   1      //  set_EADC;                                     // Enable ADC interrupt (if use interrupt)
  95   1      }
  96          
  97          /******************************************************************************
  98           * FUNCTION_PURPOSE: ADC interrupt Service Routine
  99           ******************************************************************************/
 100          void ADC_ISR (void) interrupt 11
 101          {
 102   1          clr_ADCF;                               //clear ADC interrupt flag
 103   1          adc_RH = ADCRH;
 104   1          key_flag = 1;
 105   1      //    if(ADCRH)
 106   1      //    printf ("\n Value = 0x%bx",ADCRH);
 107   1      }
 108          
 109          #if 0
              void  adc_init(void)
              {
                ADCCON0&=0xc0;    //AD转换启动AD标志完成
                AINDIDS=0x00;   
                AIN(AINx);      //通道选择并配置
                ADCCON1|=SET_BIT0;  //ADC使能
              }
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 10:43:48 PAGE 3   

              
              void  AIN (UINT8  adc_AINx)
              {
                switch(adc_AINx)
                {
                  case  AIN0:
                    ADCCON0 |= 0x00;
                    P17_Input_Mode;
                    AINDIDS|=SET_BIT0;
                    break;
                  
                  case  AIN1:
                    ADCCON0 |= 0x01;
                    P30_Input_Mode;
                    AINDIDS|=SET_BIT1;
                    break;
                  
                  case  AIN2:
                    ADCCON0 |= 0x02;
                    P07_Input_Mode;
                    AINDIDS|=SET_BIT2;
                    break;
                    
                  case  AIN3:
                    ADCCON0 |= 0x03;
                    P06_Input_Mode;
                    AINDIDS|=SET_BIT3;
                    break;
                    
                  case  AIN4:
                    ADCCON0 |= 0x04;
                    P05_Input_Mode;
                    AINDIDS|=SET_BIT4;
                    break;
                    
                  case  AIN5:
                    ADCCON0 |= 0x05;
                    P04_Input_Mode;
                    AINDIDS|=SET_BIT5;
                    break;
                    ;
                  case  AIN6:
                    ADCCON0 |= 0x06;
                    P03_Input_Mode;
                    AINDIDS|=SET_BIT6;
                    break;
                    
                  case  AIN7:
                    ADCCON0 |= 0x07;
                    P11_Input_Mode;
                    AINDIDS|=SET_BIT7;
                    break;
                    
                  default:
                    break;
                }
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     96    ----
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 10:43:48 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
