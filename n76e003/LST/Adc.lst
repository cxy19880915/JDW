C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 20:51:26 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\Adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\Adc.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include;.\Include) DEFIN
                    -E(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Adc.lst) TABS(2) OBJECT(.\Output\Adc.obj)

line level    source

   1          #include "adc.h"
   2          
   3          /*************  本地变量声明  **************/
   4          UINT8 adc_count = 0,KEY_VALUE = 0;
   5          UINT8   key_flag = 0;
   6          UINT8 adc_RH = 0;
   7          //UINT8 adc_V = 0;
   8          //bit   adc_V_flag = 0;
   9          
  10          //#define   POWER   0xf0
  11          //#define   MODE    0x10
  12          //#define   VOL_A   0x20
  13          //#define   VOL_B   0x30
  14          //#define   SOURCE  0x40
  15          
  16          extern  void  GPIO_MUTE(void);
  17          extern  UINT8 VOL_LED;
  18          extern  UINT16  sys_flag;
  19          extern  bit power_flag,led_flag;
  20          extern  UINT8 source_in,mode_in,VOL_level;
  21          extern  void  NPCA110P_MODE(void);
  22          extern  void  NPCA110P_SOURCE(void);
  23          extern  void  NPCA110P_VOL_A(void);
  24          extern  void  NPCA110P_VOL_B(void);
  25          extern  void  NPCA110P_init(void);
  26          extern  void Bluetooth_Test_Task(void);
  27          
  28          UINT8 adc_start(void)
  29          {
  30   1        UINT8 adc_dat = 0;
  31   1        clr_ADCF;
  32   1        set_ADCS;
  33   1        while(ADCF == 0);
  34   1        adc_dat = ADCRH;
  35   1        adc_count++;
  36   1        return  adc_dat;
  37   1      }
  38          
  39          void  KEY_EVENT(void)
  40          {
  41   1        if(key_flag)
  42   1        {
  43   2          switch(KEY_VALUE)
  44   2          {
  45   3            case  POWER:
  46   3              power_flag = ~power_flag;
  47   3            break;
  48   3            
  49   3            case  MODE:
  50   3              sys_flag = sys_flag | sys_mode;
  51   3      //        mode_in++;
  52   3            break;
  53   3            
  54   3            case  SOURCE:
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 20:51:26 PAGE 2   

  55   3              sys_flag = sys_flag | sys_source;
  56   3      //        source_in++;
  57   3            break;
  58   3            
  59   3            case  VOL_A:
  60   3              sys_flag = sys_flag | sys_volA;
  61   3      //        VOL_level++;
  62   3            break;
  63   3            
  64   3            case  VOL_B:
  65   3              sys_flag = sys_flag | sys_volB;
  66   3      //        VOL_level--;
  67   3            break;
  68   3            
  69   3            case  ir_play:
  70   3      //        sys_flag = sys_flag | sys_play;
  71   3      //      break;
  72   3            
  73   3            case  ir_fwd:
  74   3      //        sys_flag = sys_flag | sys_fwd;
  75   3      //        VOL_level--;
  76   3      //      break;
  77   3            
  78   3            case  ir_rev:
  79   3                Bluetooth_Test_Task();
  80   3      //        sys_flag = sys_flag | sys_rev;
  81   3      //        VOL_level--;
  82   3            break;
  83   3            
  84   3            case  ir_hall:
  85   3      //        sys_flag = sys_flag | sys_hall;
  86   3              mode_in = 1;
  87   3              NPCA110P_init();
  88   3              led_flag = 1;
  89   3      //        VOL_level--;
  90   3            break;
  91   3            
  92   3            case  ir_music:
  93   3      //        sys_flag = sys_flag | sys_music;
  94   3              mode_in = 2;
  95   3              NPCA110P_init();
  96   3              led_flag = 1;
  97   3      //        VOL_level--;
  98   3            break;
  99   3            
 100   3            case  ir_speech:
 101   3      //        sys_flag = sys_flag | sys_speech;
 102   3              mode_in = 3;
 103   3              NPCA110P_init();
 104   3              led_flag = 1;
 105   3      //        VOL_level--;
 106   3            break;
 107   3            
 108   3            case  ir_mute:
 109   3              GPIO_MUTE();
 110   3              led_flag = 1;
 111   3      //        VOL_LED = 1;
 112   3      //        sys_flag = sys_flag | sys_mute;
 113   3      //        VOL_level--;
 114   3            break;
 115   3            
 116   3            default:
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 20:51:26 PAGE 3   

 117   3              break;
 118   3          }
 119   2      //    if(KEY_VALUE == POWER)
 120   2      //    {
 121   2      //      power_flag = ~power_flag;
 122   2      //    }
 123   2      //    if(KEY_VALUE == MODE)
 124   2      //    {
 125   2      //      NPCA110P_MODE();
 126   2      //      led_flag = 1;
 127   2      //    }
 128   2      //    if(adc_RH == VOL_A)
 129   2      //    {
 130   2      //      NPCA110P_VOL_A();
 131   2      //    }
 132   2      //    if(adc_RH == VOL_B)
 133   2      //    {
 134   2      //      NPCA110P_VOL_B();
 135   2      //    }
 136   2      //    if(adc_RH == SOURCE)
 137   2      //    {
 138   2      //      NPCA110P_SOURCE();
 139   2      //      led_flag = 1;
 140   2      //    }
 141   2          key_flag = 0;
 142   2        }
 143   1      }
 144          
 145          void  adc_init(void)
 146          {
 147   1      //  InitialUART0_Timer1(115200);
 148   1        P04_Quasi_Mode;
 149   1        Enable_ADC_AIN5;
 150   1      //  P04_FALLINGEDGE_TRIG_ADC;                     // P0.4 falling edge as adc start trig signal
 151   1      //  set_EADC;                                     // Enable ADC interrupt (if use interrupt)
 152   1      }
 153          
 154          /******************************************************************************
 155           * FUNCTION_PURPOSE: ADC interrupt Service Routine
 156           ******************************************************************************/
 157          void ADC_ISR (void) interrupt 11
 158          {
 159   1          clr_ADCF;                               //clear ADC interrupt flag
 160   1          adc_RH = ADCRH;
 161   1          key_flag = 1;
 162   1      //    if(ADCRH)
 163   1      //    printf ("\n Value = 0x%bx",ADCRH);
 164   1      }
 165          
 166          #if 0
              void  adc_init(void)
              {
                ADCCON0&=0xc0;    //AD转换启动AD标志完成
                AINDIDS=0x00;   
                AIN(AINx);      //通道选择并配置
                ADCCON1|=SET_BIT0;  //ADC使能
              }
              
              void  AIN (UINT8  adc_AINx)
              {
                switch(adc_AINx)
                {
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 20:51:26 PAGE 4   

                  case  AIN0:
                    ADCCON0 |= 0x00;
                    P17_Input_Mode;
                    AINDIDS|=SET_BIT0;
                    break;
                  
                  case  AIN1:
                    ADCCON0 |= 0x01;
                    P30_Input_Mode;
                    AINDIDS|=SET_BIT1;
                    break;
                  
                  case  AIN2:
                    ADCCON0 |= 0x02;
                    P07_Input_Mode;
                    AINDIDS|=SET_BIT2;
                    break;
                    
                  case  AIN3:
                    ADCCON0 |= 0x03;
                    P06_Input_Mode;
                    AINDIDS|=SET_BIT3;
                    break;
                    
                  case  AIN4:
                    ADCCON0 |= 0x04;
                    P05_Input_Mode;
                    AINDIDS|=SET_BIT4;
                    break;
                    
                  case  AIN5:
                    ADCCON0 |= 0x05;
                    P04_Input_Mode;
                    AINDIDS|=SET_BIT5;
                    break;
                    ;
                  case  AIN6:
                    ADCCON0 |= 0x06;
                    P03_Input_Mode;
                    AINDIDS|=SET_BIT6;
                    break;
                    
                  case  AIN7:
                    ADCCON0 |= 0x07;
                    P11_Input_Mode;
                    AINDIDS|=SET_BIT7;
                    break;
                    
                  default:
                    break;
                }
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    158    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 20:51:26 PAGE 5   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
