C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 17:20:14 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\Adc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Common\Adc.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Include;.\Include) DEFIN
                    -E(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Adc.lst) TABS(2) OBJECT(.\Output\Adc.obj)

line level    source

   1          #include "adc.h"
   2          
   3          /*************  本地变量声明  **************/
   4          UINT8 adc_count = 0,KEY_VALUE = 0;
   5          UINT8   key_flag = 0;
   6          UINT8 adc_RH = 0;
   7          //UINT8 adc_V = 0;
   8          //bit   adc_V_flag = 0;
   9          
  10          //#define   POWER   0xf0
  11          //#define   MODE    0x10
  12          //#define   VOL_A   0x20
  13          //#define   VOL_B   0x30
  14          //#define   SOURCE  0x40
  15          
  16          extern  UINT16  sys_flag;
  17          extern  bit power_flag,led_flag;
  18          extern  UINT8 source_in,mode_in,VOL_level;
  19          extern  void  NPCA110P_MODE(void);
  20          extern  void  NPCA110P_SOURCE(void);
  21          extern  void  NPCA110P_VOL_A(void);
  22          extern  void  NPCA110P_VOL_B(void);
  23          
  24          UINT8 adc_start(void)
  25          {
  26   1        UINT8 adc_dat = 0;
  27   1        clr_ADCF;
  28   1        set_ADCS;
  29   1        while(ADCF == 0);
  30   1        adc_dat = ADCRH;
  31   1        adc_count++;
  32   1        return  adc_dat;
  33   1      }
  34          
  35          void  KEY_EVENT(void)
  36          {
  37   1        if(key_flag)
  38   1        {
  39   2          switch(KEY_VALUE)
  40   2          {
  41   3            case  POWER:
  42   3              power_flag = ~power_flag;
  43   3            break;
  44   3            
  45   3            case  MODE:
  46   3              sys_flag = sys_flag | sys_mode;
  47   3      //        mode_in++;
  48   3            break;
  49   3            
  50   3            case  SOURCE:
  51   3              sys_flag = sys_flag | sys_source;
  52   3      //        source_in++;
  53   3            break;
  54   3            
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 17:20:14 PAGE 2   

  55   3            case  VOL_A:
  56   3              sys_flag = sys_flag | sys_volA;
  57   3      //        VOL_level++;
  58   3            break;
  59   3            
  60   3            case  VOL_B:
  61   3              sys_flag = sys_flag | sys_volB;
  62   3      //        VOL_level--;
  63   3            break;
  64   3            
  65   3            case  ir_play:
  66   3              sys_flag = sys_flag | sys_play;
  67   3      //        VOL_level--;
  68   3            break;
  69   3            
  70   3            case  ir_fwd:
  71   3              sys_flag = sys_flag | sys_fwd;
  72   3      //        VOL_level--;
  73   3            break;
  74   3            
  75   3            case  ir_rev:
  76   3              sys_flag = sys_flag | sys_rev;
  77   3      //        VOL_level--;
  78   3            break;
  79   3            
  80   3            case  ir_hall:
  81   3              sys_flag = sys_flag | sys_hall;
  82   3      //        VOL_level--;
  83   3            break;
  84   3            
  85   3            case  ir_music:
  86   3              sys_flag = sys_flag | sys_music;
  87   3      //        VOL_level--;
  88   3            break;
  89   3            
  90   3            case  ir_speech:
  91   3              sys_flag = sys_flag | sys_speech;
  92   3      //        VOL_level--;
  93   3            break;
  94   3            
  95   3            case  ir_mute:
  96   3              sys_flag = sys_flag | sys_mute;
  97   3      //        VOL_level--;
  98   3            break;
  99   3            
 100   3            default:
 101   3              break;
 102   3          }
 103   2      //    if(KEY_VALUE == POWER)
 104   2      //    {
 105   2      //      power_flag = ~power_flag;
 106   2      //    }
 107   2      //    if(KEY_VALUE == MODE)
 108   2      //    {
 109   2      //      NPCA110P_MODE();
 110   2      //      led_flag = 1;
 111   2      //    }
 112   2      //    if(adc_RH == VOL_A)
 113   2      //    {
 114   2      //      NPCA110P_VOL_A();
 115   2      //    }
 116   2      //    if(adc_RH == VOL_B)
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 17:20:14 PAGE 3   

 117   2      //    {
 118   2      //      NPCA110P_VOL_B();
 119   2      //    }
 120   2      //    if(adc_RH == SOURCE)
 121   2      //    {
 122   2      //      NPCA110P_SOURCE();
 123   2      //      led_flag = 1;
 124   2      //    }
 125   2          key_flag = 0;
 126   2        }
 127   1      }
 128          
 129          void  adc_init(void)
 130          {
 131   1      //  InitialUART0_Timer1(115200);
 132   1        P04_Quasi_Mode;
 133   1        Enable_ADC_AIN5;
 134   1      //  P04_FALLINGEDGE_TRIG_ADC;                     // P0.4 falling edge as adc start trig signal
 135   1      //  set_EADC;                                     // Enable ADC interrupt (if use interrupt)
 136   1      }
 137          
 138          /******************************************************************************
 139           * FUNCTION_PURPOSE: ADC interrupt Service Routine
 140           ******************************************************************************/
 141          void ADC_ISR (void) interrupt 11
 142          {
 143   1          clr_ADCF;                               //clear ADC interrupt flag
 144   1          adc_RH = ADCRH;
 145   1          key_flag = 1;
 146   1      //    if(ADCRH)
 147   1      //    printf ("\n Value = 0x%bx",ADCRH);
 148   1      }
 149          
 150          #if 0
              void  adc_init(void)
              {
                ADCCON0&=0xc0;    //AD转换启动AD标志完成
                AINDIDS=0x00;   
                AIN(AINx);      //通道选择并配置
                ADCCON1|=SET_BIT0;  //ADC使能
              }
              
              void  AIN (UINT8  adc_AINx)
              {
                switch(adc_AINx)
                {
                  case  AIN0:
                    ADCCON0 |= 0x00;
                    P17_Input_Mode;
                    AINDIDS|=SET_BIT0;
                    break;
                  
                  case  AIN1:
                    ADCCON0 |= 0x01;
                    P30_Input_Mode;
                    AINDIDS|=SET_BIT1;
                    break;
                  
                  case  AIN2:
                    ADCCON0 |= 0x02;
                    P07_Input_Mode;
                    AINDIDS|=SET_BIT2;
C51 COMPILER V9.56.0.0   ADC                                                               12/29/2017 17:20:14 PAGE 4   

                    break;
                    
                  case  AIN3:
                    ADCCON0 |= 0x03;
                    P06_Input_Mode;
                    AINDIDS|=SET_BIT3;
                    break;
                    
                  case  AIN4:
                    ADCCON0 |= 0x04;
                    P05_Input_Mode;
                    AINDIDS|=SET_BIT4;
                    break;
                    
                  case  AIN5:
                    ADCCON0 |= 0x05;
                    P04_Input_Mode;
                    AINDIDS|=SET_BIT5;
                    break;
                    ;
                  case  AIN6:
                    ADCCON0 |= 0x06;
                    P03_Input_Mode;
                    AINDIDS|=SET_BIT6;
                    break;
                    
                  case  AIN7:
                    ADCCON0 |= 0x07;
                    P11_Input_Mode;
                    AINDIDS|=SET_BIT7;
                    break;
                    
                  default:
                    break;
                }
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    158    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
